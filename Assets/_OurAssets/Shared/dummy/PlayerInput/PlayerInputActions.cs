//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_OurAssets/Shared/dummy/PlayerInput/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Grappler"",
            ""id"": ""365cd4ae-cf9e-4d47-881c-0c262d64e6c6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6bf3def8-f836-40d2-abc7-aea2037e784f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b697cc66-f308-4233-b7ed-243f36eb2568"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""cd862a00-b0c0-49b2-9ba3-64bc37d3a429"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""e4899c99-c7dc-4de0-9e88-7165f5ed90a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldingUp"",
                    ""type"": ""Button"",
                    ""id"": ""dd5107a7-288b-4c25-a80d-0d2302921433"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldingDown"",
                    ""type"": ""Button"",
                    ""id"": ""3e212549-d2e7-4b3d-882d-ecaf5b35ec13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""202f9b5b-598f-478e-aafc-360c87ccae83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""33bc8b8b-0e14-4317-a822-1a5ab1295364"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5f4c8977-0128-4d11-9417-6f2f182a2c03"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""48f7f2e4-3ba2-443d-81a3-185608c97915"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f855b623-269c-4ed2-be09-ce8bf8ab78f5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97e2eee3-1b3d-45ee-af6e-a46289923580"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03c7484d-865e-4d76-a52b-157e6450dcfb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldingUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95e125f0-ffd0-4af7-a816-fc59e2dd97e5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldingDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34d4e022-1d09-49d3-b91b-3b33d2e40e9e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e697e38-789b-4b09-9885-4e337bc4c837"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""c4a83b27-eb5b-416b-a0a1-43077a426ec6"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // Grappler
        m_Grappler = asset.FindActionMap("Grappler", throwIfNotFound: true);
        m_Grappler_Movement = m_Grappler.FindAction("Movement", throwIfNotFound: true);
        m_Grappler_Jump = m_Grappler.FindAction("Jump", throwIfNotFound: true);
        m_Grappler_Attack = m_Grappler.FindAction("Attack", throwIfNotFound: true);
        m_Grappler_Special = m_Grappler.FindAction("Special", throwIfNotFound: true);
        m_Grappler_HoldingUp = m_Grappler.FindAction("HoldingUp", throwIfNotFound: true);
        m_Grappler_HoldingDown = m_Grappler.FindAction("HoldingDown", throwIfNotFound: true);
        m_Grappler_Menu = m_Grappler.FindAction("Menu", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grappler
    private readonly InputActionMap m_Grappler;
    private List<IGrapplerActions> m_GrapplerActionsCallbackInterfaces = new List<IGrapplerActions>();
    private readonly InputAction m_Grappler_Movement;
    private readonly InputAction m_Grappler_Jump;
    private readonly InputAction m_Grappler_Attack;
    private readonly InputAction m_Grappler_Special;
    private readonly InputAction m_Grappler_HoldingUp;
    private readonly InputAction m_Grappler_HoldingDown;
    private readonly InputAction m_Grappler_Menu;
    public struct GrapplerActions
    {
        private @PlayerInputActions m_Wrapper;
        public GrapplerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Grappler_Movement;
        public InputAction @Jump => m_Wrapper.m_Grappler_Jump;
        public InputAction @Attack => m_Wrapper.m_Grappler_Attack;
        public InputAction @Special => m_Wrapper.m_Grappler_Special;
        public InputAction @HoldingUp => m_Wrapper.m_Grappler_HoldingUp;
        public InputAction @HoldingDown => m_Wrapper.m_Grappler_HoldingDown;
        public InputAction @Menu => m_Wrapper.m_Grappler_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Grappler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrapplerActions set) { return set.Get(); }
        public void AddCallbacks(IGrapplerActions instance)
        {
            if (instance == null || m_Wrapper.m_GrapplerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GrapplerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Special.started += instance.OnSpecial;
            @Special.performed += instance.OnSpecial;
            @Special.canceled += instance.OnSpecial;
            @HoldingUp.started += instance.OnHoldingUp;
            @HoldingUp.performed += instance.OnHoldingUp;
            @HoldingUp.canceled += instance.OnHoldingUp;
            @HoldingDown.started += instance.OnHoldingDown;
            @HoldingDown.performed += instance.OnHoldingDown;
            @HoldingDown.canceled += instance.OnHoldingDown;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IGrapplerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Special.started -= instance.OnSpecial;
            @Special.performed -= instance.OnSpecial;
            @Special.canceled -= instance.OnSpecial;
            @HoldingUp.started -= instance.OnHoldingUp;
            @HoldingUp.performed -= instance.OnHoldingUp;
            @HoldingUp.canceled -= instance.OnHoldingUp;
            @HoldingDown.started -= instance.OnHoldingDown;
            @HoldingDown.performed -= instance.OnHoldingDown;
            @HoldingDown.canceled -= instance.OnHoldingDown;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IGrapplerActions instance)
        {
            if (m_Wrapper.m_GrapplerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGrapplerActions instance)
        {
            foreach (var item in m_Wrapper.m_GrapplerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GrapplerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GrapplerActions @Grappler => new GrapplerActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    public struct MenuActions
    {
        private @PlayerInputActions m_Wrapper;
        public MenuActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IGrapplerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
        void OnHoldingUp(InputAction.CallbackContext context);
        void OnHoldingDown(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
    }
}
